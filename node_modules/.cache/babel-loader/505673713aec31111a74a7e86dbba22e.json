{"ast":null,"code":"import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from \"axios\";\nimport { NotificationManager } from 'react-notifications';\nimport { PRODUCT_ADD } from \"../actions\";\nimport { productAddSuccess, productAddError } from \"./actions\";\nimport { getCurrentUser } from '../../helpers/Utils';\nimport { API_URL } from \"../../apiUrl\";\nexport function* watchAddedProduct() {\n  yield takeEvery(PRODUCT_ADD, AddedProductDetails);\n}\n\nconst AddedProductDetailsAsync = async data => {\n  await axios.post(`${API_URL}/seller/product-add`, data).then(product => {\n    console.log(\"added product\", product);\n\n    if (product.status === 200) {\n      NotificationManager.success(product.data.message);\n    } else if (doc.status === 206) {\n      NotificationManager.warning(product.data.message);\n    }\n  }).catch(error => NotificationManager.warning(error));\n};\n\n_c = AddedProductDetailsAsync;\n\nfunction* AddedProductDetails({\n  payload\n}) {\n  console.log(\"payload\", payload.product);\n  const {\n    name,\n    rate\n  } = payload.product;\n  const user_id = getCurrentUser().id;\n\n  try {\n    const data = {\n      user_id,\n      name,\n      rate\n    };\n    const addedproducts = yield call(AddedProductDetailsAsync, data);\n    console.log(\"addedproducts\", addedproducts);\n    yield put(productAddSuccess(addedproducts.data.data));\n  } catch (e) {\n    yield put(productAddError(e));\n    /* console.log(\"e\", e) */\n  }\n}\n/* export function* watchDocTable() {\n    \n    yield takeEvery(DOCUMENTS_TABLE, DocTableDetails);\n}\n\n\nfunction* DocTableDetails({ payload }) {\n    try {\n        const url = `${API_URL}/table/document/${payload.id}`;\n        const documents = yield call(() => axios.get(url))\n\n        console.log(documents, \"response\");\n        if (documents.status === 200) {\n\n            yield put(DocTableSuccess(documents.data.data))\n\n\n\n        } else if (documents.status === 206) {\n            yield put(productAddError(documents.data.msg))\n\n        }\n\n    }\n    catch (e) {\n        console.log(\"e\", e)\n\n    }\n\n}\n\nexport function* watchDocDelete() {\n   \n    yield takeEvery(USER_DOCUMENTS_DELETE, DocDeleteDetails);\n}\n\n\nfunction* DocDeleteDetails({ payload }) {\n\n\n    console.log(\"paylod\", payload.id)\n    try {\n        const url = `${API_URL}/tripDocuments/${payload.id}`;\n        const profiles = yield call(() => axios.delete(url))\n\n        console.log(profiles, \"response\");\n        if (profiles.status === 200) {\n\n            yield put(userDeleteSuccess(payload.id))\n\n\n        } else if (profiles.status === 206) {\n            yield put(userDeleteError(profiles.data.msg))\n\n        }\n\n    }\n    catch (e) {\n        console.log(\"e\", e)\n\n    }\n\n}\n\n\nexport function* watchDocSelected() {\n   \n    yield takeEvery(DOCUMENTS_EDIT, DocSelectedDetails);\n}\n\n\nfunction* DocSelectedDetails({ payload }) {\n\n\n    \n    try {\n        const url = `${API_URL}/tripDocuments/edit/${payload.id}`;\n        const documents = yield call(() => axios.get(url))\n\n        console.log(documents, \"selected doc\");\n        if (documents.status === 200) {\n\n            yield put(userEditSuccess(documents.data.data))\n\n\n\n        } else if (documents.status === 206) {\n            yield put(userEditError(documents.data.msg))\n\n        }\n\n    }\n    catch (e) {\n        console.log(\"e\", e)\n\n    }\n\n}\n\nexport function* watchUserUpdateDocument() {\n   \n    yield takeEvery(USER_DOCUMENTS_UPDATE, userUpdateDocumentDetails);\n}\n\nconst userUpdateDocDetailsAsync = async (data) => {\n    \n    await axios.post(`${API_URL}/tripDocuments/update`, data)\n\n        .then((doc) => {\n            console.log(\"doc updated\", doc)\n            if (doc.status === 200) {\n\n                NotificationManager.success(doc.data.msg, 'Document updated', 3000, null, null, '');\n\n            } else if (doc.status === 206) {\n\n                NotificationManager.warning(doc.data.msg, 'Error in updating Document', 3000, null, null, '');\n            }\n        })\n        .catch((error) => NotificationManager.warning(error, 'Document Error', 3000, null, null, ''));\n}\n\n\n\n\n\nfunction* userUpdateDocumentDetails({ payload }) {\n   \n    const {\n        id,\n        user_id,\n        trip_profile_document,\n        trip_profile_name,\n        document_name,\n        document_category,\n        document_subcategory,\n        valid_from,\n        valid_to,\n        dropzone\n    } = payload.doc\n\n    let trip_id = null\n    let profile_id = null\n\n\n    if (trip_profile_document === \"Trip\") {\n        trip_id = trip_profile_name\n    }\n    else { profile_id = trip_profile_name }\n    \n\n    try {\n        const doc = {\n            id, user_id, trip_profile_document, trip_id, profile_id, document_name, document_category, document_subcategory, valid_from,\n            valid_to, dropzone\n        }\n\n        const getDoc = yield call(userUpdateDocDetailsAsync, doc);\n\n\n        console.log(\"getprofile\", getDoc)\n        yield put(userDocUpdateSuccess(getDoc.data.data));\n    } catch (e) {\n        yield put(userDocUpdateError(e))\n      \n    }\n\n}\n */\n\n\n_c2 = AddedProductDetails;\nexport default function* rootSaga() {\n  yield all([fork(watchAddedProduct)\n  /*  fork(watchDocTable),\n   fork(watchDocDelete),\n   fork(watchDocSelected),\n   fork(watchUserUpdateDocument) */\n  ]);\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddedProductDetailsAsync\");\n$RefreshReg$(_c2, \"AddedProductDetails\");","map":{"version":3,"sources":["/Users/zibranshaikh/Downloads/scaffoldzoid/frontend/src/redux/product/saga.js"],"names":["all","call","fork","put","takeEvery","axios","NotificationManager","PRODUCT_ADD","productAddSuccess","productAddError","getCurrentUser","API_URL","watchAddedProduct","AddedProductDetails","AddedProductDetailsAsync","data","post","then","product","console","log","status","success","message","doc","warning","catch","error","payload","name","rate","user_id","id","addedproducts","e","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,SAA/B,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,qBAApC;AAEA,SACIC,WADJ,QAGS,YAHT;AAKA,SACIC,iBADJ,EAEIC,eAFJ,QAIS,WAJT;AAMA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,OAAT,QAAwB,cAAxB;AAGA,OAAO,UAAUC,iBAAV,GAA8B;AACjC,QAAMR,SAAS,CAACG,WAAD,EAAcM,mBAAd,CAAf;AACH;;AAED,MAAMC,wBAAwB,GAAG,MAAOC,IAAP,IAAgB;AAE7C,QAAMV,KAAK,CAACW,IAAN,CAAY,GAAEL,OAAQ,qBAAtB,EAA4CI,IAA5C,EAEDE,IAFC,CAEKC,OAAD,IAAa;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,OAA7B;;AACA,QAAIA,OAAO,CAACG,MAAR,KAAmB,GAAvB,EAA4B;AAExBf,MAAAA,mBAAmB,CAACgB,OAApB,CAA4BJ,OAAO,CAACH,IAAR,CAAaQ,OAAzC;AAEH,KAJD,MAIO,IAAIC,GAAG,CAACH,MAAJ,KAAe,GAAnB,EAAwB;AAE3Bf,MAAAA,mBAAmB,CAACmB,OAApB,CAA4BP,OAAO,CAACH,IAAR,CAAaQ,OAAzC;AACH;AACJ,GAZC,EAaDG,KAbC,CAaMC,KAAD,IAAWrB,mBAAmB,CAACmB,OAApB,CAA4BE,KAA5B,CAbhB,CAAN;AAcH,CAhBD;;KAAMb,wB;;AAsBN,UAAUD,mBAAV,CAA8B;AAAEe,EAAAA;AAAF,CAA9B,EAA2C;AACvCT,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBQ,OAAO,CAACV,OAA/B;AACA,QAAM;AACFW,IAAAA,IADE;AAEFC,IAAAA;AAFE,MAIFF,OAAO,CAACV,OAJZ;AAOA,QAAMa,OAAO,GAAGrB,cAAc,GAAGsB,EAAjC;;AAEA,MAAI;AACA,UAAMjB,IAAI,GAAG;AACTgB,MAAAA,OADS;AACAF,MAAAA,IADA;AACMC,MAAAA;AADN,KAAb;AAIA,UAAMG,aAAa,GAAG,MAAMhC,IAAI,CAACa,wBAAD,EAA2BC,IAA3B,CAAhC;AAGAI,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Ba,aAA7B;AACA,UAAM9B,GAAG,CAACK,iBAAiB,CAACyB,aAAa,CAAClB,IAAd,CAAmBA,IAApB,CAAlB,CAAT;AACH,GAVD,CAUE,OAAOmB,CAAP,EAAU;AACR,UAAM/B,GAAG,CAACM,eAAe,CAACyB,CAAD,CAAhpMUrB,mB;AAuMV,eAAe,UAAUsB,QAAV,GAAqB;AAChC,QAAMnC,GAAG,CAAC,CACNE,IAAI,CAACU,iBAAD;AACJ;AACR;AACA;AACA;AALc,GAAD,CAAT;AASH","sourcesContent":["import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from \"axios\";\nimport { NotificationManager } from 'react-notifications';\n\nimport {\n    PRODUCT_ADD,\n}\n    from \"../actions\"\n\nimport {\n    productAddSuccess,\n    productAddError\n}\n    from \"./actions\"\n\nimport { getCurrentUser } from '../../helpers/Utils';\nimport { API_URL } from \"../../apiUrl\"\n\n\nexport function* watchAddedProduct() {\n    yield takeEvery(PRODUCT_ADD, AddedProductDetails);\n}\n\nconst AddedProductDetailsAsync = async (data) => {\n\n    await axios.post(`${API_URL}/seller/product-add`, data)\n\n        .then((product) => {\n            console.log(\"added product\", product)\n            if (product.status === 200) {\n\n                NotificationManager.success(product.data.message);\n\n            } else if (doc.status === 206) {\n\n                NotificationManager.warning(product.data.message);\n            }\n        })\n        .catch((error) => NotificationManager.warning(error));\n}\n\n\n\n\n\nfunction* AddedProductDetails({ payload }) {\n    console.log(\"payload\", payload.product)\n    const {\n        name,\n        rate,\n\n    } = payload.product\n\n\n    const user_id = getCurrentUser().id\n\n    try {\n        const data = {\n            user_id, name, rate\n        }\n\n        const addedproducts = yield call(AddedProductDetailsAsync, data);\n\n\n        console.log(\"addedproducts\", addedproducts)\n        yield put(productAddSuccess(addedproducts.data.data));\n    } catch (e) {\n        yield put(productAddError(e))\n        /* console.log(\"e\", e) */\n    }\n\n}\n\n/* export function* watchDocTable() {\n    \n    yield takeEvery(DOCUMENTS_TABLE, DocTableDetails);\n}\n\n\nfunction* DocTableDetails({ payload }) {\n    try {\n        const url = `${API_URL}/table/document/${payload.id}`;\n        const documents = yield call(() => axios.get(url))\n\n        console.log(documents, \"response\");\n        if (documents.status === 200) {\n\n            yield put(DocTableSuccess(documents.data.data))\n\n\n\n        } else if (documents.status === 206) {\n            yield put(productAddError(documents.data.msg))\n\n        }\n\n    }\n    catch (e) {\n        console.log(\"e\", e)\n\n    }\n\n}\n\nexport function* watchDocDelete() {\n   \n    yield takeEvery(USER_DOCUMENTS_DELETE, DocDeleteDetails);\n}\n\n\nfunction* DocDeleteDetails({ payload }) {\n\n\n    console.log(\"paylod\", payload.id)\n    try {\n        const url = `${API_URL}/tripDocuments/${payload.id}`;\n        const profiles = yield call(() => axios.delete(url))\n\n        console.log(profiles, \"response\");\n        if (profiles.status === 200) {\n\n            yield put(userDeleteSuccess(payload.id))\n\n\n        } else if (profiles.status === 206) {\n            yield put(userDeleteError(profiles.data.msg))\n\n        }\n\n    }\n    catch (e) {\n        console.log(\"e\", e)\n\n    }\n\n}\n\n\nexport function* watchDocSelected() {\n   \n    yield takeEvery(DOCUMENTS_EDIT, DocSelectedDetails);\n}\n\n\nfunction* DocSelectedDetails({ payload }) {\n\n\n    \n    try {\n        const url = `${API_URL}/tripDocuments/edit/${payload.id}`;\n        const documents = yield call(() => axios.get(url))\n\n        console.log(documents, \"selected doc\");\n        if (documents.status === 200) {\n\n            yield put(userEditSuccess(documents.data.data))\n\n\n\n        } else if (documents.status === 206) {\n            yield put(userEditError(documents.data.msg))\n\n        }\n\n    }\n    catch (e) {\n        console.log(\"e\", e)\n\n    }\n\n}\n\nexport function* watchUserUpdateDocument() {\n   \n    yield takeEvery(USER_DOCUMENTS_UPDATE, userUpdateDocumentDetails);\n}\n\nconst userUpdateDocDetailsAsync = async (data) => {\n    \n    await axios.post(`${API_URL}/tripDocuments/update`, data)\n\n        .then((doc) => {\n            console.log(\"doc updated\", doc)\n            if (doc.status === 200) {\n\n                NotificationManager.success(doc.data.msg, 'Document updated', 3000, null, null, '');\n\n            } else if (doc.status === 206) {\n\n                NotificationManager.warning(doc.data.msg, 'Error in updating Document', 3000, null, null, '');\n            }\n        })\n        .catch((error) => NotificationManager.warning(error, 'Document Error', 3000, null, null, ''));\n}\n\n\n\n\n\nfunction* userUpdateDocumentDetails({ payload }) {\n   \n    const {\n        id,\n        user_id,\n        trip_profile_document,\n        trip_profile_name,\n        document_name,\n        document_category,\n        document_subcategory,\n        valid_from,\n        valid_to,\n        dropzone\n    } = payload.doc\n\n    let trip_id = null\n    let profile_id = null\n\n\n    if (trip_profile_document === \"Trip\") {\n        trip_id = trip_profile_name\n    }\n    else { profile_id = trip_profile_name }\n    \n\n    try {\n        const doc = {\n            id, user_id, trip_profile_document, trip_id, profile_id, document_name, document_category, document_subcategory, valid_from,\n            valid_to, dropzone\n        }\n\n        const getDoc = yield call(userUpdateDocDetailsAsync, doc);\n\n\n        console.log(\"getprofile\", getDoc)\n        yield put(userDocUpdateSuccess(getDoc.data.data));\n    } catch (e) {\n        yield put(userDocUpdateError(e))\n      \n    }\n\n}\n */\n\n\nexport default function* rootSaga() {\n    yield all([\n        fork(watchAddedProduct),\n        /*  fork(watchDocTable),\n         fork(watchDocDelete),\n         fork(watchDocSelected),\n         fork(watchUserUpdateDocument) */\n\n\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}