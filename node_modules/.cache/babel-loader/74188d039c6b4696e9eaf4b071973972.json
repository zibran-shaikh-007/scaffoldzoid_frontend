{"ast":null,"code":"import { filterProps } from './utils';\nimport { FormatError, ErrorCode } from 'intl-messageformat';\nimport { IntlError, IntlErrorCode } from './error';\nvar LIST_FORMAT_OPTIONS = ['localeMatcher', 'type', 'style'];\nvar now = Date.now();\n\nfunction generateToken(i) {\n  return now + \"_\" + i + \"_\" + now;\n}\n\nexport function formatList(_a, getListFormat, values, options) {\n  var locale = _a.locale,\n      onError = _a.onError;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var ListFormat = Intl.ListFormat;\n\n  if (!ListFormat) {\n    onError(new FormatError(\"Intl.ListFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-listformat\\\"\\n\", ErrorCode.MISSING_INTL_API));\n  }\n\n  var filteredOptions = filterProps(options, LIST_FORMAT_OPTIONS);\n\n  try {\n    var richValues_1 = {};\n    var serializedValues = values.map(function (v, i) {\n      if (typeof v === 'object') {\n        var id = generateToken(i);\n        richValues_1[id] = v;\n        return id;\n      }\n\n      return String(v);\n    });\n\n    if (!Object.keys(richValues_1).length) {\n      return getListFormat(locale, filteredOptions).format(serializedValues);\n    }\n\n    var parts = getListFormat(locale, filteredOptions).formatToParts(serializedValues);\n    return parts.reduce(function (all, el) {\n      var val = el.value;\n\n      if (richValues_1[val]) {\n        all.push(richValues_1[val]);\n      } else if (typeof all[all.length - 1] === 'string') {\n        all[all.length - 1] += val;\n      } else {\n        all.push(val);\n      }\n\n      return all;\n    }, []);\n  } catch (e) {\n    onError(new IntlError(IntlErrorCode.FORMAT_ERROR, 'Error formatting list.', e));\n  } // @ts-ignore\n\n\n  return values;\n}","map":{"version":3,"sources":["/Users/zibranshaikh/Downloads/scaffoldzoid/frontend/node_modules/@formatjs/intl/lib/src/list.js"],"names":["filterProps","FormatError","ErrorCode","IntlError","IntlErrorCode","LIST_FORMAT_OPTIONS","now","Date","generateToken","i","formatList","_a","getListFormat","values","options","locale","onError","ListFormat","Intl","MISSING_INTL_API","filteredOptions","richValues_1","serializedValues","map","v","id","String","Object","keys","length","format","parts","formatToParts","reduce","all","el","val","value","push","e","FORMAT_ERROR"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,oBAAvC;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,SAAzC;AACA,IAAIC,mBAAmB,GAAG,CACtB,eADsB,EAEtB,MAFsB,EAGtB,OAHsB,CAA1B;AAKA,IAAIC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAV;;AACA,SAASE,aAAT,CAAuBC,CAAvB,EAA0B;AACtB,SAAOH,GAAG,GAAG,GAAN,GAAYG,CAAZ,GAAgB,GAAhB,GAAsBH,GAA7B;AACH;;AACD,OAAO,SAASI,UAAT,CAAoBC,EAApB,EAAwBC,aAAxB,EAAuCC,MAAvC,EAA+CC,OAA/C,EAAwD;AAC3D,MAAIC,MAAM,GAAGJ,EAAE,CAACI,MAAhB;AAAA,MAAwBC,OAAO,GAAGL,EAAE,CAACK,OAArC;;AACA,MAAIF,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,MAAIG,UAAU,GAAGC,IAAI,CAACD,UAAtB;;AACA,MAAI,CAACA,UAAL,EAAiB;AACbD,IAAAA,OAAO,CAAC,IAAIf,WAAJ,CAAgB,iHAAhB,EAAmIC,SAAS,CAACiB,gBAA7I,CAAD,CAAP;AACH;;AACD,MAAIC,eAAe,GAAGpB,WAAW,CAACc,OAAD,EAAUT,mBAAV,CAAjC;;AACA,MAAI;AACA,QAAIgB,YAAY,GAAG,EAAnB;AACA,QAAIC,gBAAgB,GAAGT,MAAM,CAACU,GAAP,CAAW,UAAUC,CAAV,EAAaf,CAAb,EAAgB;AAC9C,UAAI,OAAOe,CAAP,KAAa,QAAjB,EAA2B;AACvB,YAAIC,EAAE,GAAGjB,aAAa,CAACC,CAAD,CAAtB;AACAY,QAAAA,YAAY,CAACI,EAAD,CAAZ,GAAmBD,CAAnB;AACA,eAAOC,EAAP;AACH;;AACD,aAAOC,MAAM,CAACF,CAAD,CAAb;AACH,KAPsB,CAAvB;;AAQA,QAAI,CAACG,MAAM,CAACC,IAAP,CAAYP,YAAZ,EAA0BQ,MAA/B,EAAuC;AACnC,aAAOjB,aAAa,CAACG,MAAD,EAASK,eAAT,CAAb,CAAuCU,MAAvC,CAA8CR,gBAA9C,CAAP;AACH;;AACD,QAAIS,KAAK,GAAGnB,aAAa,CAACG,MAAD,EAASK,eAAT,CAAb,CAAuCY,aAAvC,CAAqDV,gBAArD,CAAZ;AACA,WAAOS,KAAK,CAACE,MAAN,CAAa,UAAUC,GAAV,EAAeC,EAAf,EAAmB;AACnC,UAAIC,GAAG,GAAGD,EAAE,CAACE,KAAb;;AACA,UAAIhB,YAAY,CAACe,GAAD,CAAhB,EAAuB;AACnBF,QAAAA,GAAG,CAACI,IAAJ,CAASjB,YAAY,CAACe,GAAD,CAArB;AACH,OAFD,MAGK,IAAI,OAAOF,GAAG,CAACA,GAAG,CAACL,MAAJ,GAAa,CAAd,CAAV,KAA+B,QAAnC,EAA6C;AAC9CK,QAAAA,GAAG,CAACA,GAAG,CAACL,MAAJ,GAAa,CAAd,CAAH,IAAuBO,GAAvB;AACH,OAFI,MAGA;AACDF,QAAAA,GAAG,CAACI,IAAJ,CAASF,GAAT;AACH;;AACD,aAAOF,GAAP;AACH,KAZM,EAYJ,EAZI,CAAP;AAaH,GA3BD,CA4BA,OAAOK,CAAP,EAAU;AACNvB,IAAAA,OAAO,CAAC,IAAIb,SAAJ,CAAcC,aAAa,CAACoC,YAA5B,EAA0C,wBAA1C,EAAoED,CAApE,CAAD,CAAP;AACH,GAtC0D,CAuC3D;;;AACA,SAAO1B,MAAP;AACH","sourcesContent":["import { filterProps } from './utils';\nimport { FormatError, ErrorCode } from 'intl-messageformat';\nimport { IntlError, IntlErrorCode } from './error';\nvar LIST_FORMAT_OPTIONS = [\n    'localeMatcher',\n    'type',\n    'style',\n];\nvar now = Date.now();\nfunction generateToken(i) {\n    return now + \"_\" + i + \"_\" + now;\n}\nexport function formatList(_a, getListFormat, values, options) {\n    var locale = _a.locale, onError = _a.onError;\n    if (options === void 0) { options = {}; }\n    var ListFormat = Intl.ListFormat;\n    if (!ListFormat) {\n        onError(new FormatError(\"Intl.ListFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-listformat\\\"\\n\", ErrorCode.MISSING_INTL_API));\n    }\n    var filteredOptions = filterProps(options, LIST_FORMAT_OPTIONS);\n    try {\n        var richValues_1 = {};\n        var serializedValues = values.map(function (v, i) {\n            if (typeof v === 'object') {\n                var id = generateToken(i);\n                richValues_1[id] = v;\n                return id;\n            }\n            return String(v);\n        });\n        if (!Object.keys(richValues_1).length) {\n            return getListFormat(locale, filteredOptions).format(serializedValues);\n        }\n        var parts = getListFormat(locale, filteredOptions).formatToParts(serializedValues);\n        return parts.reduce(function (all, el) {\n            var val = el.value;\n            if (richValues_1[val]) {\n                all.push(richValues_1[val]);\n            }\n            else if (typeof all[all.length - 1] === 'string') {\n                all[all.length - 1] += val;\n            }\n            else {\n                all.push(val);\n            }\n            return all;\n        }, []);\n    }\n    catch (e) {\n        onError(new IntlError(IntlErrorCode.FORMAT_ERROR, 'Error formatting list.', e));\n    }\n    // @ts-ignore\n    return values;\n}\n"]},"metadata":{},"sourceType":"module"}