{"ast":null,"code":"import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from \"axios\";\nimport { NotificationManager } from 'react-notifications';\nimport { LOGIN_USER, REGISTER_USER, LOGOUT_USER } from '../actions';\nimport { loginUserSuccess, loginUserError, registerUserSuccess, registerUserError } from './actions';\nimport { setCurrentUser } from '../../helpers/Utils';\nimport { API_URL } from \"../../apiUrl.js\";\nexport function* watchLoginUser() {\n  yield takeEvery(LOGIN_USER, loginWithEmailPassword);\n}\n\nconst loginWithEmailPasswordAsync = async (email, password, history) => await axios.post(`${API_URL}/user/login`, {\n  email,\n  password\n}).then(user => {\n  console.log(\"user\", user);\n\n  if (user.status === 200) {\n    setCurrentUser(user.data.data);\n    put(loginUserSuccess(user.data.data));\n    NotificationManager.success(user.data.message);\n\n    if (user.data.data.role === \"seller\") {\n      history.push(\"/seller\");\n    } else if (user.data.data.role === \"buyer\") {\n      history.push(\"/buyer\");\n    }\n  } else if (user.status === 206) {\n    put(loginUserError(user.data.msg));\n    NotificationManager.warning(user.data.message);\n  }\n}).catch(error => NotificationManager.warning(error));\n\nfunction* loginWithEmailPassword({\n  payload\n}) {\n  const {\n    email,\n    password\n  } = payload.user;\n  const {\n    history\n  } = payload;\n  const loginUser = yield call(loginWithEmailPasswordAsync, email, password, history);\n}\n\nexport function* watchRegisterUser() {\n  yield takeEvery(REGISTER_USER, registerWithEmailPassword);\n}\n\nconst registerWithEmailPasswordAsync = async (username, email, password, role, history) => await axios.post(`${API_URL}/user/register`, {\n  username,\n  email,\n  password,\n  role\n}).then(user => {\n  if (user.status === 200) {\n    put(registerUserSuccess(user.data.data));\n    NotificationManager.success(user.data.message);\n    history.push('/login');\n  } else if (user.status === 206) {\n    put(registerUserError(user.data.message));\n    NotificationManager.warning(user.data.message);\n  }\n}).catch(error => {\n  NotificationManager.warning(error, 'Registeration Error', 3000, null, null, '');\n});\n\nfunction* registerWithEmailPassword({\n  payload\n}) {\n  console.log(\"value register\", payload);\n  const {\n    username,\n    email,\n    password,\n    role\n  } = payload.user;\n  const {\n    history\n  } = payload;\n\n  try {\n    const registerUser = yield call(registerWithEmailPasswordAsync, username, email, password, role, history);\n    /* console.log(\"register user data\", registerUser) */\n  } catch (error) {\n    yield put(registerUserError(error));\n  }\n}\n\nexport function* watchLogoutUser() {\n  yield takeEvery(LOGOUT_USER, logout);\n}\n\nfunction* logout({\n  payload\n}) {\n  const {\n    history\n  } = payload;\n  setCurrentUser();\n  history.push(\"/\");\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLoginUser), fork(watchLogoutUser), fork(watchRegisterUser)]);\n}","map":{"version":3,"sources":["/Users/zibranshaikh/Downloads/scaffoldzoid/frontend/src/redux/auth/saga.js"],"names":["all","call","fork","put","takeEvery","axios","NotificationManager","LOGIN_USER","REGISTER_USER","LOGOUT_USER","loginUserSuccess","loginUserError","registerUserSuccess","registerUserError","setCurrentUser","API_URL","watchLoginUser","loginWithEmailPassword","loginWithEmailPasswordAsync","email","password","history","post","then","user","console","log","status","data","success","message","role","push","msg","warning","catch","error","payload","loginUser","watchRegisterUser","registerWithEmailPassword","registerWithEmailPasswordAsync","username","registerUser","watchLogoutUser","logout","rootSaga"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from \"axios\"\nimport { NotificationManager } from 'react-notifications';\n\n\nimport {\n  LOGIN_USER,\n  REGISTER_USER,\n  LOGOUT_USER,\n\n} from '../actions';\n\nimport {\n  loginUserSuccess,\n  loginUserError,\n  registerUserSuccess,\n  registerUserError,\n\n} from './actions';\nimport { setCurrentUser } from '../../helpers/Utils';\nimport { API_URL } from \"../../apiUrl.js\"\n\n\nexport function* watchLoginUser() {\n  yield takeEvery(LOGIN_USER, loginWithEmailPassword);\n}\n\nconst loginWithEmailPasswordAsync = async (email, password, history) =>\n\n  await axios.post(`${API_URL}/user/login`, { email, password })\n    .then((user) => {\n      console.log(\"user\", user)\n      if (user.status === 200) {\n        setCurrentUser(user.data.data);\n        put(loginUserSuccess(user.data.data));\n\n        NotificationManager.success(user.data.message);\n        if (user.data.data.role === \"seller\") {\n          history.push(\"/seller\")\n        } else if (user.data.data.role === \"buyer\") {\n          history.push(\"/buyer\")\n        }\n\n      } else if (user.status === 206) {\n        put(loginUserError(user.data.msg))\n        NotificationManager.warning(user.data.message);\n      }\n    })\n    .catch((error) => NotificationManager.warning(error));\n\nfunction* loginWithEmailPassword({ payload }) {\n  const { email, password } = payload.user;\n  const { history } = payload;\n  \n  const loginUser = yield call(loginWithEmailPasswordAsync, email, password, history);\n}\n\nexport function* watchRegisterUser() {\n  \n  yield takeEvery(REGISTER_USER, registerWithEmailPassword);\n}\n\nconst registerWithEmailPasswordAsync = async (username, email, password, role, history) =>\n\nawait axios.post(`${API_URL}/user/register`, { username, email, password, role })\n    \n    .then((user) => {\n    \n      if (user.status === 200) {\n        put(registerUserSuccess(user.data.data))\n        NotificationManager.success(user.data.message);\n        history.push('/login')\n      } else if (user.status === 206) {\n        put(registerUserError(user.data.message))\n        NotificationManager.warning(user.data.message);\n      }\n\n    })\n    .catch((error) => {\n     \n      NotificationManager.warning(error, 'Registeration Error', 3000, null, null, '')\n    });\n\nfunction* registerWithEmailPassword({ payload }) {\n  console.log(\"value register\", payload)\n  const { username, email, password, role } = payload.user;\n  const { history } = payload;\n  try {\n    const registerUser = yield call(\n      registerWithEmailPasswordAsync,\n      username, email, password, role, history\n\n    );\n    /* console.log(\"register user data\", registerUser) */\n\n  } catch (error) {\n    yield put(registerUserError(error));\n  }\n}\n\nexport function* watchLogoutUser() {\n\n  yield takeEvery(LOGOUT_USER, logout);\n}\n\n\n\nfunction* logout({ payload }) {\n  const { history } = payload;\n  setCurrentUser();\n  history.push(\"/\");\n\n}\n\n\n\n\nexport default function* rootSaga() {\n  yield all([\n    fork(watchLoginUser),\n    fork(watchLogoutUser),\n    fork(watchRegisterUser),\n\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}