{"ast":null,"code":"// eslint-disable-next-line import/no-cycle\nimport { LOGIN_USER, LOGIN_USER_SUCCESS, LOGOUT_USER, REGISTER_USER, REGISTER_USER_SUCCESS, LOGIN_USER_ERROR, REGISTER_USER_ERROR, FORGOT_PASSWORD, FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_ERROR, RESET_PASSWORD, RESET_PASSWORD_SUCCESS, RESET_PASSWORD_ERROR } from '../actions';\nexport const loginUser = (user, history) => ({\n  type: LOGIN_USER,\n  payload: {\n    user,\n    history\n  }\n});\nexport const loginUserSuccess = user => ({\n  type: LOGIN_USER_SUCCESS,\n  payload: user\n});\nexport const loginUserError = message => ({\n  type: LOGIN_USER_ERROR,\n  payload: {\n    message\n  }\n});\nexport const forgotPassword = (forgotUserMail, history) => ({\n  type: FORGOT_PASSWORD,\n  payload: {\n    forgotUserMail,\n    history\n  }\n});\nexport const forgotPasswordSuccess = forgotUserMail => ({\n  type: FORGOT_PASSWORD_SUCCESS,\n  payload: forgotUserMail\n});\nexport const forgotPasswordError = message => ({\n  type: FORGOT_PASSWORD_ERROR,\n  payload: {\n    message\n  }\n});\nexport const resetPassword = (reset, history) => ({\n  type: RESET_PASSWORD,\n  payload: {\n    reset,\n    history\n  }\n});\nexport const resetPasswordSuccess = reset => ({\n  type: RESET_PASSWORD_SUCCESS,\n  payload: reset\n});\nexport const resetPasswordError = message => ({\n  type: RESET_PASSWORD_ERROR,\n  payload: {\n    message\n  }\n});\nexport const registerUser = (user, history) => ({\n  type: REGISTER_USER,\n  payload: {\n    user,\n    history\n  }\n});\nexport const registerUserSuccess = user => ({\n  type: REGISTER_USER_SUCCESS,\n  payload: user\n});\nexport const registerUserError = message => ({\n  type: REGISTER_USER_ERROR,\n  payload: {\n    message\n  }\n});\nexport const logoutUser = history => ({\n  type: LOGOUT_USER,\n  payload: {\n    history\n  }\n});","map":{"version":3,"sources":["/Users/zibranshaikh/Downloads/scaffoldzoid/frontend/src/redux/auth/actions.js"],"names":["LOGIN_USER","LOGIN_USER_SUCCESS","LOGOUT_USER","REGISTER_USER","REGISTER_USER_SUCCESS","LOGIN_USER_ERROR","REGISTER_USER_ERROR","FORGOT_PASSWORD","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_ERROR","RESET_PASSWORD","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_ERROR","loginUser","user","history","type","payload","loginUserSuccess","loginUserError","message","forgotPassword","forgotUserMail","forgotPasswordSuccess","forgotPasswordError","resetPassword","reset","resetPasswordSuccess","resetPasswordError","registerUser","registerUserSuccess","registerUserError","logoutUser"],"mappings":"AAAA;AACA,SACEA,UADF,EAEEC,kBAFF,EAGEC,WAHF,EAIEC,aAJF,EAKEC,qBALF,EAMEC,gBANF,EAOEC,mBAPF,EAQEC,eARF,EASEC,uBATF,EAUEC,qBAVF,EAWEC,cAXF,EAYEC,sBAZF,EAaEC,oBAbF,QAcO,YAdP;AAgBA,OAAO,MAAMC,SAAS,GAAG,CAACC,IAAD,EAAOC,OAAP,MAAoB;AAC3CC,EAAAA,IAAI,EAAEhB,UADqC;AAE3CiB,EAAAA,OAAO,EAAE;AAAEH,IAAAA,IAAF;AAAQC,IAAAA;AAAR;AAFkC,CAApB,CAAlB;AAIP,OAAO,MAAMG,gBAAgB,GAAIJ,IAAD,KAAW;AACzCE,EAAAA,IAAI,EAAEf,kBADmC;AAEzCgB,EAAAA,OAAO,EAAEH;AAFgC,CAAX,CAAzB;AAIP,OAAO,MAAMK,cAAc,GAAIC,OAAD,KAAc;AAC1CJ,EAAAA,IAAI,EAAEX,gBADoC;AAE1CY,EAAAA,OAAO,EAAE;AAAEG,IAAAA;AAAF;AAFiC,CAAd,CAAvB;AAKP,OAAO,MAAMC,cAAc,GAAG,CAACC,cAAD,EAAiBP,OAAjB,MAA8B;AAC1DC,EAAAA,IAAI,EAAET,eADoD;AAE1DU,EAAAA,OAAO,EAAE;AAAEK,IAAAA,cAAF;AAAkBP,IAAAA;AAAlB;AAFiD,CAA9B,CAAvB;AAIP,OAAO,MAAMQ,qBAAqB,GAAID,cAAD,KAAqB;AACxDN,EAAAA,IAAI,EAAER,uBADkD;AAExDS,EAAAA,OAAO,EAAEK;AAF+C,CAArB,CAA9B;AAIP,OAAO,MAAME,mBAAmB,GAAIJ,OAAD,KAAc;AAC/CJ,EAAAA,IAAI,EAAEP,qBADyC;AAE/CQ,EAAAA,OAAO,EAAE;AAAEG,IAAAA;AAAF;AAFsC,CAAd,CAA5B;AAKP,OAAO,MAAMK,aAAa,GAAG,CAACC,KAAD,EAAQX,OAAR,MAAsB;AACjDC,EAAAA,IAAI,EAAEN,cAD2C;AAGjDO,EAAAA,OAAO,EAAE;AAAES,IAAAA,KAAF;AAASX,IAAAA;AAAT;AAHwC,CAAtB,CAAtB;AAMP,OAAO,MAAMY,oBAAoB,GAAID,KAAD,KAAY;AAE9CV,EAAAA,IAAI,EAAEL,sBAFwC;AAG9CM,EAAAA,OAAO,EAAES;AAHqC,CAAZ,CAA7B;AAKP,OAAO,MAAME,kBAAkB,GAAIR,OAAD,KAAc;AAC9CJ,EAAAA,IAAI,EAAEJ,oBADwC;AAE9CK,EAAAA,OAAO,EAAE;AAAEG,IAAAA;AAAF;AAFqC,CAAd,CAA3B;AAKP,OAAO,MAAMS,YAAY,GAAG,CAACf,IAAD,EAAOC,OAAP,MAAoB;AAC9CC,EAAAA,IAAI,EAAEb,aADwC;AAE9Cc,EAAAA,OAAO,EAAE;AAAEH,IAAAA,IAAF;AAAQC,IAAAA;AAAR;AAFqC,CAApB,CAArB;AAKP,OAAO,MAAMe,mBAAmB,GAAIhB,IAAD,KAAW;AAC5CE,EAAAA,IAAI,EAAEZ,qBADsC;AAE5Ca,EAAAA,OAAO,EAAEH;AAFmC,CAAX,CAA5B;AAIP,OAAO,MAAMiB,iBAAiB,GAAIX,OAAD,KAAc;AAC7CJ,EAAAA,IAAI,EAAEV,mBADuC;AAE7CW,EAAAA,OAAO,EAAE;AAAEG,IAAAA;AAAF;AAFoC,CAAd,CAA1B;AAKP,OAAO,MAAMY,UAAU,GAAIjB,OAAD,KAAc;AACtCC,EAAAA,IAAI,EAAEd,WADgC;AAEtCe,EAAAA,OAAO,EAAE;AAAEF,IAAAA;AAAF;AAF6B,CAAd,CAAnB","sourcesContent":["// eslint-disable-next-line import/no-cycle\nimport {\n  LOGIN_USER,\n  LOGIN_USER_SUCCESS,\n  LOGOUT_USER,\n  REGISTER_USER,\n  REGISTER_USER_SUCCESS,\n  LOGIN_USER_ERROR,\n  REGISTER_USER_ERROR,\n  FORGOT_PASSWORD,\n  FORGOT_PASSWORD_SUCCESS,\n  FORGOT_PASSWORD_ERROR,\n  RESET_PASSWORD,\n  RESET_PASSWORD_SUCCESS,\n  RESET_PASSWORD_ERROR,\n} from '../actions';\n\nexport const loginUser = (user, history) => ({\n  type: LOGIN_USER,\n  payload: { user, history },\n});\nexport const loginUserSuccess = (user) => ({\n  type: LOGIN_USER_SUCCESS,\n  payload: user,\n});\nexport const loginUserError = (message) => ({\n  type: LOGIN_USER_ERROR,\n  payload: { message },\n});\n\nexport const forgotPassword = (forgotUserMail, history) => ({\n  type: FORGOT_PASSWORD,\n  payload: { forgotUserMail, history },\n});\nexport const forgotPasswordSuccess = (forgotUserMail) => ({\n  type: FORGOT_PASSWORD_SUCCESS,\n  payload: forgotUserMail,\n});\nexport const forgotPasswordError = (message) => ({\n  type: FORGOT_PASSWORD_ERROR,\n  payload: { message },\n});\n\nexport const resetPassword = (reset, history ) => ({\n  type: RESET_PASSWORD,\n  \n  payload: { reset, history },\n \n});\nexport const resetPasswordSuccess = (reset) => ({\n  \n  type: RESET_PASSWORD_SUCCESS,\n  payload: reset,\n});\nexport const resetPasswordError = (message) => ({\n  type: RESET_PASSWORD_ERROR,\n  payload: { message },\n});\n\nexport const registerUser = (user, history) => ({\n  type: REGISTER_USER,\n  payload: { user, history },\n\n});\nexport const registerUserSuccess = (user) => ({\n  type: REGISTER_USER_SUCCESS,\n  payload: user,\n});\nexport const registerUserError = (message) => ({\n  type: REGISTER_USER_ERROR,\n  payload: { message },\n});\n\nexport const logoutUser = (history) => ({\n  type: LOGOUT_USER,\n  payload: { history },\n});\n"]},"metadata":{},"sourceType":"module"}