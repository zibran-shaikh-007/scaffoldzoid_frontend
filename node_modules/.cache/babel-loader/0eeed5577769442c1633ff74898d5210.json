{"ast":null,"code":"import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from \"axios\";\nimport { NotificationManager } from 'react-notifications';\nimport { LOGIN_USER, REGISTER_USER, LOGOUT_USER } from '../actions';\nimport { loginUserSuccess, loginUserError, registerUserSuccess, registerUserError } from './actions';\n/* import { adminRoot, currentUser } from '../../constants/defaultValues'; */\n\nimport { setCurrentUser } from '../../helpers/Utils';\nimport { API_URL } from \"../../apiUrl.js\";\nexport function* watchLoginUser() {\n  // eslint-disable-next-line no-use-before-define\n  yield takeEvery(LOGIN_USER, loginWithEmailPassword);\n}\n\nconst loginWithEmailPasswordAsync = async (email, password, history) => // eslint-disable-next-line no-return-await\nawait axios.post(`${API_URL}/user/login`, {\n  email,\n  password\n})\n/*  .signInWithEmailAndPassword(email, password) */\n.then(user => {\n  console.log(\"user\", user);\n\n  if (user.status === 200) {\n    setCurrentUser(user.data.data);\n    put(loginUserSuccess(user.data.data));\n    NotificationManager.success(user.data.message, 'Sucessfully Logged In', 3000, null, null, '');\n    /*  history.push(\"/dashboard\") */\n  } else if (user.status === 206) {\n    put(loginUserError(user.data.msg));\n    NotificationManager.warning(user.data.msg, 'Login User', 3000, null, null, '');\n  }\n}).catch(error => NotificationManager.warning(error, 'Login Error', 3000, null, null, ''));\n\nfunction* loginWithEmailPassword({\n  payload\n}) {\n  const {\n    email,\n    password\n  } = payload.user;\n  const {\n    history\n  } = payload;\n  /*  try { */\n\n  const loginUser = yield call(loginWithEmailPasswordAsync, email, password, history);\n  /*  if (!loginUser.message) {\n     const item = { uid: loginUser.user.uid, ...currentUser };\n     setCurrentUser(item);\n     yield put(loginUserSuccess(item));\n     history.push(adminRoot);\n   } else {\n     yield put(loginUserError(loginUser.message));\n   }\n  } catch (error) {\n   yield put(loginUserError(error));\n  } */\n}\n\nexport function* watchRegisterUser() {\n  // eslint-disable-next-line no-use-before-define\n  yield takeEvery(REGISTER_USER, registerWithEmailPassword);\n}\n\nconst registerWithEmailPasswordAsync = async (username, email, password, role, history) => // eslint-disable-next-line no-return-await\nawait axios.post(`${API_URL}/user/register`, {\n  username,\n  email,\n  password,\n  role\n})\n/* .createUserWithEmailAndPassword(name,mobile, email, password) */\n.then(user => {\n  /*  console.log(\"user\", user) */\n  if (user.status === 200) {\n    put(registerUserSuccess(user.data.data));\n    NotificationManager.success(user.data.message\n    /* 'Registeration Succesfully', 3000, null, null, '' */\n    );\n    history.push('/login');\n  } else if (user.status === 206) {\n    put(registerUserError(user.data.message));\n    NotificationManager.warning(user.data.message\n    /* 'Registered User', 3000, null, null, '' */\n    );\n  }\n}).catch(error => {\n  /*  console.log(error, \"err\") */\n  NotificationManager.warning(error, 'Registeration Error', 3000, null, null, '');\n});\n\nfunction* registerWithEmailPassword({\n  payload\n}) {\n  console.log(\"value register\", payload);\n  const {\n    username,\n    email,\n    password,\n    role\n  } = payload.user;\n  const {\n    history\n  } = payload;\n\n  try {\n    const registerUser = yield call(registerWithEmailPasswordAsync, username, email, password, role, history);\n    console.log(\"register user data\", registerUser);\n    /*  if (!registerUser.message) {\n       const item = { uid: registerUser.user.id,};\n      \n        setCurrentUser(item);\n       yield put(registerUserSuccess(item));\n       history.push(adminRoot);\n     } else {\n       yield put(registerUserError(registerUser.message));\n     } */\n  } catch (error) {\n    yield put(registerUserError(error));\n  }\n}\n/* export function* watchLogoutUser() {\n  \n  yield takeEvery(LOGOUT_USER, logout);\n}\n\nconst logoutAsync = async (history) => {\n  await auth\n    .signOut()\n    .then((user) => user)\n    .catch((error) => error);\n  history.push(\"/\");\n};\n\nfunction* logout({ payload }) {\n  const { history } = payload;\n  setCurrentUser();\n  yield call(logoutAsync, history);\n}\n */\n\n\nexport default function* rootSaga() {\n  yield all([fork(watchLoginUser),\n  /* fork(watchLogoutUser), */\n  fork(watchRegisterUser)]);\n}","map":{"version":3,"sources":["/Users/zibranshaikh/Downloads/scaffoldzoid/frontend/src/redux/auth/saga.js"],"names":["all","call","fork","put","takeEvery","axios","NotificationManager","LOGIN_USER","REGISTER_USER","LOGOUT_USER","loginUserSuccess","loginUserError","registerUserSuccess","registerUserError","setCurrentUser","API_URL","watchLoginUser","loginWithEmailPassword","loginWithEmailPasswordAsync","email","password","history","post","then","user","console","log","status","data","success","message","msg","warning","catch","error","payload","loginUser","watchRegisterUser","registerWithEmailPassword","registerWithEmailPasswordAsync","username","role","push","registerUser","rootSaga"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from \"axios\"\nimport { NotificationManager } from 'react-notifications';\n\n\nimport {\n  LOGIN_USER,\n  REGISTER_USER,\n  LOGOUT_USER,\n  \n} from '../actions';\n\nimport {\n  loginUserSuccess,\n  loginUserError,\n  registerUserSuccess,\n  registerUserError,\n \n} from './actions';\n\n/* import { adminRoot, currentUser } from '../../constants/defaultValues'; */\nimport {  setCurrentUser } from '../../helpers/Utils';\nimport {API_URL} from \"../../apiUrl.js\"\n\n\nexport function* watchLoginUser() {\n  // eslint-disable-next-line no-use-before-define\n  yield takeEvery(LOGIN_USER, loginWithEmailPassword);\n}\n\nconst loginWithEmailPasswordAsync = async (email, password, history) =>\n  // eslint-disable-next-line no-return-await\n  await axios.post(`${API_URL}/user/login`, { email, password })\n    /*  .signInWithEmailAndPassword(email, password) */\n    .then((user) => {\n      console.log(\"user\", user)\n      if (user.status === 200) {\n        setCurrentUser(user.data.data);\n        put(loginUserSuccess(user.data.data));\n        NotificationManager.success(user.data.message, 'Sucessfully Logged In', 3000, null, null, '');\n       /*  history.push(\"/dashboard\") */\n      } else if (user.status === 206) {\n        put(loginUserError(user.data.msg))\n        NotificationManager.warning(user.data.msg, 'Login User', 3000, null, null, '');\n      }\n    })\n    .catch((error) => NotificationManager.warning(error, 'Login Error', 3000, null, null, ''));\n\nfunction* loginWithEmailPassword({ payload }) {\n  const { email, password } = payload.user;\n  const { history } = payload;\n  /*  try { */\n  const loginUser = yield call(loginWithEmailPasswordAsync, email, password, history);\n  \n  /*  if (!loginUser.message) {\n     const item = { uid: loginUser.user.uid, ...currentUser };\n     setCurrentUser(item);\n     yield put(loginUserSuccess(item));\n     history.push(adminRoot);\n   } else {\n     yield put(loginUserError(loginUser.message));\n   }\n } catch (error) {\n   yield put(loginUserError(error));\n } */\n}\n\nexport function* watchRegisterUser() {\n  // eslint-disable-next-line no-use-before-define\n  yield takeEvery(REGISTER_USER, registerWithEmailPassword);\n}\n\nconst registerWithEmailPasswordAsync = async (username,email, password, role, history) =>\n\n  // eslint-disable-next-line no-return-await\n  await axios.post(`${API_URL}/user/register`, { username,email, password, role })\n    /* .createUserWithEmailAndPassword(name,mobile, email, password) */\n    .then((user) => {\n      /*  console.log(\"user\", user) */\n      if (user.status === 200) {\n        put(registerUserSuccess(user.data.data))\n        NotificationManager.success(user.data.message, /* 'Registeration Succesfully', 3000, null, null, '' */);\n        history.push('/login')\n      } else if (user.status === 206) {\n        put(registerUserError(user.data.message))\n        NotificationManager.warning(user.data.message, /* 'Registered User', 3000, null, null, '' */);\n      }\n\n    })\n    .catch((error) => {\n      /*  console.log(error, \"err\") */\n      NotificationManager.warning(error, 'Registeration Error', 3000, null, null, '')\n    });\n\nfunction* registerWithEmailPassword({ payload }) {\n  console.log(\"value register\", payload)\n  const { username,email, password ,role} = payload.user;\n  const { history } = payload;\n  try {\n    const registerUser = yield call(\n      registerWithEmailPasswordAsync,\n      username,email, password, role, history\n      \n    );\n    console.log(\"register user data\", registerUser)\n    /*  if (!registerUser.message) {\n       const item = { uid: registerUser.user.id,};\n      \n        setCurrentUser(item);\n       yield put(registerUserSuccess(item));\n       history.push(adminRoot);\n     } else {\n       yield put(registerUserError(registerUser.message));\n     } */\n  } catch (error) {\n    yield put(registerUserError(error));\n  }\n}\n\n/* export function* watchLogoutUser() {\n  \n  yield takeEvery(LOGOUT_USER, logout);\n}\n\nconst logoutAsync = async (history) => {\n  await auth\n    .signOut()\n    .then((user) => user)\n    .catch((error) => error);\n  history.push(\"/\");\n};\n\nfunction* logout({ payload }) {\n  const { history } = payload;\n  setCurrentUser();\n  yield call(logoutAsync, history);\n}\n */\n\n\n\nexport default function* rootSaga() {\n  yield all([\n    fork(watchLoginUser),\n    /* fork(watchLogoutUser), */\n    fork(watchRegisterUser),\n   \n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}